#!/usr/bin/env python3

import argparse
import time
from jinja2 import Environment, FileSystemLoader
from watchdog.events import FileSystemEventHandler, LoggingEventHandler
from watchdog.observers import Observer

class Zoom:
	def __init__(self,z):
		self.z = z

	@property
	def scale(self):
		max_scale = 655360000 >> self.z
		min_scale = 655360000 >> (self.z+1)
		return f"<MaxScaleDenominator>{max_scale}</MaxScaleDenominator><MinScaleDenominator>{min_scale}</MinScaleDenominator>"

def zooms(min_zoom,max_zoom):
	return [Zoom(z) for z in range(min_zoom,max_zoom+1)]

def pow_f(zoom,base,base_val):
	if zoom.z < base:
		return 0
	return base_val * pow(2,(zoom.z - base))

def write(infile,outfile):
	env = Environment(
	    loader=FileSystemLoader('.')
	)
	try:	
		result = env.get_template(infile).render(zooms=zooms,pow=pow_f)
		with open(outfile,'w') as f:
			f.write(result)
	except Exception as e:
		print(e)

if __name__ == "__main__":

	parser = argparse.ArgumentParser(description='Watch a Mapnik XML template.')
	parser.add_argument('input', type=str, help='Input jinja2 template')
	parser.add_argument('output', type=str, help='Output Mapnik XML')
	args = parser.parse_args()

	write(args.input,args.output)

	class Handler(FileSystemEventHandler):
		def on_any_event(self,event):
			write(args.input,args.output)

	observer = Observer()
	observer.schedule(Handler(),args.input)
	observer.start()
	try:
		observer.join()
	except KeyboardInterrupt:
		pass
